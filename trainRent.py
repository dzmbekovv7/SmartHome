import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import joblib
import os

# –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞ –º¬≤ (—É—Å–ª–æ–≤–Ω—ã–µ, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
rent_per_m2 = {
    '–ë–∏—à–∫–µ–∫': 750,
    '–û—à': 600,
    '–ß—É–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 650,
    '–ò—Å—Å—ã–∫-–ö—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 400,
    '–ë–∞—Ç–∫–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 300,
    '–¢–∞–ª–∞—Å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 350,
    '–î–∂–∞–ª–∞–ª-–ê–±–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 370
}

property_type_multipliers = {
    '–ö–≤–∞—Ä—Ç–∏—Ä–∞': 1.0,
    '–î–æ–º': 1.1,
    '–ö–æ—Ç—Ç–µ–¥–∂': 1.25,
    '–í–∏–ª–ª–∞': 1.4
}

data = []

for region, rent_m2 in rent_per_m2.items():
    for property_type, type_multiplier in property_type_multipliers.items():
        for area in range(30, 301, 10):
            bedrooms = max(1, area // 40)
            bathrooms = max(1, area // 70)
            floors = 1 if area <= 100 else 2 if area <= 200 else 3
            has_pool = 1 if area >= 120 else 0

            base_rent = area * rent_m2 * type_multiplier

            bedroom_multiplier = 1 + (bedrooms - 1) * 0.025
            bathroom_multiplier = 1 + (bathrooms - 1) * 0.02
            floor_multiplier = 1 + (floors - 1) * 0.03
            pool_multiplier = 1.1 if has_pool else 1.0

            total_multiplier = bedroom_multiplier * bathroom_multiplier * floor_multiplier * pool_multiplier
            rent_price = base_rent * total_multiplier

            data.append({
                'area': area,
                'bedrooms': bedrooms,
                'bathrooms': bathrooms,
                'floors': floors,
                'has_pool': has_pool,
                'property_type': property_type,
                'region': region,
                'price': round(rent_price)
            })

df = pd.DataFrame(data)

# –§–∏—á–∏ –∏ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
X = df.drop('price', axis=1)
y = df['price']

# –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
categorical_features = ['property_type', 'region']
categorical_transformer = OneHotEncoder()

preprocessor = ColumnTransformer(
    transformers=[('cat', categorical_transformer, categorical_features)],
    remainder='passthrough'
)

# –°–æ–∑–¥–∞–µ–º pipeline —Å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–µ–π
rent_model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
rent_model.fit(X, y)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
os.makedirs("realestate/ml_model/models", exist_ok=True)
joblib.dump(rent_model, "realestate/ml_model/models/rent_model.pkl")
print("‚úÖ –ú–æ–¥–µ–ª—å –∞—Ä–µ–Ω–¥—ã –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ rent_model.pkl")

# üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω
plt.figure(figsize=(10, 6))
plt.hist(df['price'], bins=40, color='skyblue', edgecolor='black')
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –∞—Ä–µ–Ω–¥—ã")
plt.xlabel("–¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤")
plt.grid(True)
plt.tight_layout()
plt.savefig("realestate/ml_model/rent_price_distribution.png")
plt.show()
